{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport globalAxios from \"axios\";\nimport store from \"../../store\";\nimport router from \"../../router\";\nexport default {\n  state: {\n    lastHealthEntry: []\n  },\n  mutations: {\n    SET_LASTRECORD(state, lr) {\n      state.lastHealthEntry = lr;\n    }\n  },\n  actions: {\n    dailyhealthmon(dailymonData) {\n      const regDate = new Date();\n      if (!store.state.auth.idToken) {\n        return;\n      }\n      console.log(\"[state activity.js]:\", store.state.auth.idToken);\n      globalAxios.post(\"/dailyhealthmon.json\" + \"?auth=\" + store.state.auth.idToken, {\n        weight: dailymonData.weight,\n        bfi: dailymonData.bfi,\n        imc: dailymonData.imc,\n        waist: dailymonData.waist,\n        spo2: dailymonData.spo2,\n        breathrest: dailymonData.breathrest,\n        breathactive: dailymonData.breathactive,\n        hourssleep: dailymonData.timeslept,\n        pulserest: dailymonData.pulserest,\n        pulseactive: dailymonData.pulseactive,\n        stress: dailymonData.stress,\n        bodybattU: dailymonData.bodybattU,\n        bodybattD: dailymonData.bodybattD,\n        steps: dailymonData.steps,\n        registerDate: regDate,\n        userId: store.state.auth.userId\n      }).then(res => {\n        console.log(res);\n        router.replace(\"/dashboard\");\n      }).catch(error => console.log(error));\n    },\n    lastHealthEntry({\n      commit\n    }) {\n      console.log(\"[action:lastHealthEntry]\");\n      globalAxios\n      //.get('/dailyhealthmon.json?orderBy=\"bodybatt\"&auth=' + store.state.auth.idToken\n      .get('/dailyhealthmon.json' + '?auth=' + store.state.auth.idToken).then(res => {\n        console.log(res);\n        const data = res.data;\n        const hrs = [];\n        for (let key in data) {\n          const hr = data[key];\n          hr.id = key;\n          hrs.push(hr);\n        }\n        console.log(hrs);\n        // sort by registerDate ascending\n        const lhr = hrs.sort(function (a, b) {\n          return a.registerDate - b.registerDate;\n        });\n        // count the number of records\n        const nr = lhr.length;\n        console.log(nr);\n        // update the state with the newest record\n        commit(\"SET_LASTRECORD\", lhr[nr - 1]);\n      }).catch(error => console.log(error));\n    }\n  },\n  getters: {\n    getLastHealthEntry: state => {\n      return state.lastHealthEntry;\n    }\n  }\n};","map":{"version":3,"names":["globalAxios","store","router","state","lastHealthEntry","mutations","SET_LASTRECORD","lr","actions","dailyhealthmon","dailymonData","regDate","Date","auth","idToken","console","log","post","weight","bfi","imc","waist","spo2","breathrest","breathactive","hourssleep","timeslept","pulserest","pulseactive","stress","bodybattU","bodybattD","steps","registerDate","userId","then","res","replace","catch","error","commit","get","data","hrs","key","hr","id","push","lhr","sort","a","b","nr","length","getters","getLastHealthEntry"],"sources":["C:/Data/devops/vue/healthMon/services/frontend/src/state/modules/activity.js"],"sourcesContent":["import globalAxios from \"axios\";\r\nimport store from \"../../store\";\r\nimport router from \"../../router\";\r\n\r\nexport default {\r\n  state: {\r\n    lastHealthEntry: []\r\n  },\r\n  mutations: {\r\n    SET_LASTRECORD(state, lr) {\r\n        state.lastHealthEntry = lr;\r\n      },\r\n  },\r\n  actions: {\r\n    dailyhealthmon(dailymonData) {\r\n      const regDate = new Date();\r\n      if (!store.state.auth.idToken) {\r\n        return;\r\n      }\r\n      console.log(\"[state activity.js]:\", store.state.auth.idToken);\r\n      globalAxios\r\n        .post(\"/dailyhealthmon.json\" + \"?auth=\" + store.state.auth.idToken, {\r\n          weight: dailymonData.weight,\r\n          bfi: dailymonData.bfi,\r\n          imc: dailymonData.imc,\r\n          waist: dailymonData.waist,\r\n          spo2: dailymonData.spo2,\r\n          breathrest: dailymonData.breathrest,\r\n          breathactive: dailymonData.breathactive,\r\n          hourssleep: dailymonData.timeslept,\r\n          pulserest: dailymonData.pulserest,\r\n          pulseactive: dailymonData.pulseactive,\r\n          stress: dailymonData.stress,\r\n          bodybattU: dailymonData.bodybattU,\r\n          bodybattD: dailymonData.bodybattD,\r\n          steps: dailymonData.steps,\r\n          registerDate: regDate,\r\n          userId: store.state.auth.userId,\r\n        })\r\n        .then((res) => {\r\n          console.log(res);\r\n          router.replace(\"/dashboard\");\r\n        })\r\n        .catch((error) => console.log(error));\r\n    },\r\n    lastHealthEntry({commit}) {\r\n      console.log(\"[action:lastHealthEntry]\")\r\n      globalAxios\r\n        //.get('/dailyhealthmon.json?orderBy=\"bodybatt\"&auth=' + store.state.auth.idToken\r\n        .get('/dailyhealthmon.json' + '?auth=' + store.state.auth.idToken\r\n        ).then((res) => {   \r\n          console.log(res);\r\n          const data = res.data;\r\n          const hrs = [];\r\n          for (let key in data) {\r\n            const hr = data[key];\r\n            hr.id = key;\r\n            hrs.push(hr);\r\n          }\r\n          console.log(hrs);\r\n          // sort by registerDate ascending\r\n          const lhr= hrs.sort(function(a, b){\r\n            return a.registerDate - b.registerDate;\r\n          });\r\n          // count the number of records\r\n          const nr=lhr.length\r\n          console.log(nr)\r\n          // update the state with the newest record\r\n          commit(\"SET_LASTRECORD\", lhr[nr-1]);         \r\n      })\r\n      .catch((error) => console.log(error));\r\n    }\r\n  },\r\n  getters: {\r\n    getLastHealthEntry: (state) => {\r\n      return state.lastHealthEntry;\r\n    },\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}